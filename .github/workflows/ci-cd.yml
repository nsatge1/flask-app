name: CI/CD Flask App via SSH

on:
  push:
    branches: [ "main" ]

env:
  REMOTE_PATH: /home/ubuntu/flask-app

jobs:
  codeql:
    name: 🔍 CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Analyze
        uses: github/codeql-action/analyze@v3

  trivy:
    name: 🐳 Trivy Image Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t flask-app:latest .

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v0.11.2
        with:
          image-ref: flask-app:latest
          format: table
          exit-code: 0  # exit-code: 1 si tu veux que le job échoue en cas de vulnérabilités

  deploy:
    name: 🚀 Deploy via SSH
    runs-on: ubuntu-latest
    needs: [codeql, trivy]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Copy updated files to EC2
        run: |
          rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" . ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:$REMOTE_PATH

      - name: Restart Docker container on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/flask-app
            docker-compose down
            docker-compose up --build -d
            docker system prune -f
          EOF